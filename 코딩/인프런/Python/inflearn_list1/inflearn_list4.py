# 시퀀스 자료형: 순서를 가지는 요소들로 구성된 자료형
# 문자열, 바이트 시퀀스, 바이트 배열, 리스트, 튜플, range() 객체

# 시퀀스 자료형의 특징
# 요소들이 순서를 가짐, 인덱스 이용해 요소 참조 가능

# 문자열에 대한 참조
words = 'Nice To Meet You!'
print(words[0], words[5], words[-1]) # N T !

li = ['사과', '바나나', '복숭아', '토마토']
print(li[0], li[2], li[-1]) # 사과 복숭아 토마토


# 시퀀스의 길이 구하기
print("-----------------------------------")
print("words의 길이: ", len(words) )
print("li의 길이: ", len(li) )


# 시퀀스에서 가능한 연산, 함수
print("-----------------------------------")
li1 = [1, 2]
print("li1의 주소값: ", id(li1) )

li2 = [3, 4, 5]
print("li2의 주소값: ", id(li2) )

li3 = li1 + li2
print("li3의 주소값: ", id(li3) )
print(li3)


# * 연산자는 시퀀스 자료형에서 해당하는 값 반복해 요소의 수 증가
print("-----------------------------------")
print(['안녕', 'hi'] * 3)


# in, not in 연산자 
print("-----------------------------------")
print(10 in [1, 2, 3])
print(10  not in [1, 2, 3])

# 시퀀스 자료형의 최댓값
print("-----------------------------------")
print(max([1, 2, 3, -5]))
print(min([1, 2, 3, -5]))


# 문자열 리스트에서 max, min 함수는 의미가 없다..?
print("-----------------------------------")
print(max(['안녕', 'hi', '가나다라', '하마']))

# 반복문의 시퀀스 자료형이 올 수 있다.
print("-----------------------------------")
for i in [1,2,3,4,5]:
    print(i)

for i in '일이삼':
    print(i)